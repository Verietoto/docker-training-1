name: Deploy into staging workflow

on:
  push:
    branches:
      - main
env:
  ECR_REPOSITORY: learning/learning1
  EC2_TAG_PROJECT: learning
  EC2_TAG_SERVICE: docker
  EC2_TAG_ENVIRONMENT: staging
  SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}


jobs:
  build-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Get Latest Tag
        id: latest-tag
        run: |
          latest_tag=$(git tag -l 'v*' | sort -V | tail -1)
          echo "Latest tag is: $latest_tag"
          echo "tag=$latest_tag" >> "$GITHUB_OUTPUT"
        shell: bash


      - name: Bump Patch Version and Reset RC
        id: bump-version
        run: |
          latest_tag="${{ steps.latest-tag.outputs.tag }}"
          echo "Latest tag: $latest_tag"

          # Remove prefix 'v' and any '-rc.x' suffix
          base_version="${latest_tag#v}"
          base_version="${base_version%%-rc.*}"

          # Split into major, minor, patch
          IFS='.' read -r major minor patch <<< "$base_version"

          # Increment patch
          new_patch=$((patch + 1))

          # Compose new version with -rc.1
          new_version="v$major.$minor.$new_patch-rc.1"

          echo "new_tag=$new_version" >> "$GITHUB_OUTPUT"
        shell: bash

      - name: Check Newer Semver Format
        run: ./cli/semver.sh -v ${{ steps.bump-version.outputs.new_tag}}
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1.7.0
      
      - name: Build, tag, and push image to Amazon ECR
        id: push-image
        env:
          DOCKER_IMAGE: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ steps.bump-version.outputs.new_tag }}
        run: |
          docker buildx build . -f ./dockerfile --platform linux/amd64 -t $DOCKER_IMAGE --provenance false --push
          echo "docker_image=${{ env.DOCKER_IMAGE }}" >> $GITHUB_OUTPUT

      - name: Execute remote SSH commands using SSH key
        id: deploy-ec2
        if: success()
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.EC2_SSH }}
          port: ${{ secrets.PORT }}
          script: |
            aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ steps.login-ecr.outputs.registry }}
            echo "Stopping all running containers..."
            docker stop $(docker ps -q) || echo "No containers to stop."

            echo "Removing all containers..."
            docker rm $(docker ps -aq) || echo "No containers to remove."

            echo "Pruning unused Docker resources..."
            docker system prune -af

            echo "Pulling the latest image from ECR..."
            docker pull ${{ steps.push-image.outputs.docker_image }}

            docker run -d -p 80:8080 --restart unless-stopped --name learning-app ${{ steps.push-image.outputs.docker_image }}
      
      - name: Slack Alert
        env:
          SERVICE_VERSION: ${{ ssteps.bump-version.outputs.new_tag }}
        uses: act10ns/slack@v2
        with:
          config: .github/config/slack.yml
          status: ${{ job.status }}
          steps: ${{ toJson(steps) }}
        if: always()
